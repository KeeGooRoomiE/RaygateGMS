<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldier_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init main variables

image_speed=0;

mouse_direction=0;
mouse_pointer=0;

isMoving=false;
isShooting=false;
isColliding=false;
isIdle=true;

alarm[0]=0.5*room_speed;

shoot_time=0.2*room_speed;
shoot_timer=shoot_time;

idle_timer=3*room_speed;

spd=2;
diagonal_modifier=0.77;
dm=diagonal_modifier;










</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving shortcuts

moving0=spr_soldier_move0;
moving1=spr_soldier_move1;
moving2=spr_soldier_move2;
moving3=spr_soldier_move3;
moving4=spr_soldier_move4;
moving5=spr_soldier_move5;
moving6=spr_soldier_move6;
moving7=spr_soldier_move7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon variables

//snpiershot
sniperbullet=0;
sniperpiercing=0.1;
sniperammo=0;

//rifle
riflebullet=0;
riflepirecing=1.1;
rifleammo=0;

//slugshot
slugbullet=0;
slugpirecing=6.4;
slugammo=0;

//mouse_direction=round(point_direction(x,y,mouse_x,mouse_y)/45)%8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle activate
if isIdle
{
    image_single=irandom(image_number-1);
}
alarm[0]=3*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Behavior script


//Sets mouse pointer
mouse_pointer=(point_direction(x,y,mouse_x,mouse_y));

//Sets steps to moving character
if speed&gt;0
{
    if irandom(99)&gt;85
    {
        instance_create(x+irandom_range(-2,2),(y+12)+irandom_range(-2,2),obj_grasshole);
    }
}

//Idle\Moving values
if !isMoving
{
    sprite_index=spr_soldier_idle;
    mouse_direction=round(point_direction(x,y,mouse_x,mouse_y)/45)%8;
    image_single=mouse_direction;
    direction=mouse_direction;
    speed=0;
}
else
{
    switch (mouse_direction)
    {
        case 0: sprite_index=moving0 speed=spd; break;
        case 1: sprite_index=moving1 speed=spd*dm; break;
        case 2: sprite_index=moving2 speed=spd; break;
        case 3: sprite_index=moving3 speed=spd*dm; break;
        case 4: sprite_index=moving4 speed=spd; break;
        case 5: sprite_index=moving5 speed=spd*dm; break;
        case 6: sprite_index=moving6 speed=spd; break;
        case 7: sprite_index=moving7 speed=spd*dm; break;
    }
    
    image_speed=0.25;
    direction=mouse_direction*45;
    speed=spd;
}

//Moving mapping
    if keyboard_check(ord("W"))
    {
        mouse_direction=2;
        isMoving=true;
    }
    
    if keyboard_check(ord("D"))
    {
        mouse_direction=0;
        isMoving=true;
    }
        
    if keyboard_check(ord("A"))
    {
        mouse_direction=4;
        isMoving=true;
    }
        
    if keyboard_check(ord("S"))
    {
        mouse_direction=6;
        isMoving=true;
    }
        
    if keyboard_check(ord("W")) and keyboard_check(ord("D"))
    {
        mouse_direction=1;
        isMoving=true;
    }
        
    if keyboard_check(ord("W")) and keyboard_check(ord("A"))
    {
        mouse_direction=3;
        isMoving=true;
    }
    
    if keyboard_check(ord("S")) and keyboard_check(ord("A"))
    {
        mouse_direction=5;
        isMoving=true;
    }
    
    if keyboard_check(ord("S")) and keyboard_check(ord("D"))
    {
        mouse_direction=7;
        isMoving=true;
    }

//Moving remapping
if keyboard_check_released(vk_anykey)
{
    isMoving=false;
    speed=0;
    isIdle=true;
}

//Shotability
if isShooting
{
    sprite_index=spr_soldier_shot0;
    image_index=mouse_direction;
    if shoot_timer&gt;0
    {
        shoot_timer-=1;
    }
    else
    {
        shoot_timer=shoot_time;
        isShooting=false;
    }
}

//idling
if isIdle
{
    if keyboard_check_pressed(vk_anykey)
    {
        isIdle=false;
        idle_timer=3*room_speed;
    }
    idle_timer-=1;
    if idle_timer&lt;=1
    {
        alarm[0]=1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

//snipershot
if keyboard_check_pressed(ord("Z"))
{
    sniperbullet=instance_create(x,y,obj_sniperbullet);
    sniperbullet.direction=mouse_pointer+random_range(-sniperpiercing,sniperpiercing);
    isShooting=true;
}

//blood
if keyboard_check_pressed(ord("B"))
{
    repeat(irandom_range(8,36))
    {
        var blood=instance_create(x,y+8,obj_blood);
            blood.direction=irandom(359);
    }
}

//rifleshot
if keyboard_check_pressed(ord("X"))
{
    riflebullet=instance_create(x,y,obj_riflebullet);
    riflebullet.direction=mouse_pointer+irandom_range(-riflepirecing,riflepirecing);
    isShooting=true;
}

//slugshot
if keyboard_check_pressed(ord("C"))
{
    repeat(irandom_range(3,7))
    {
        slugbullet=instance_create(x,y,obj_slugbullet);
        slugbullet.direction=mouse_pointer+irandom_range(-slugpirecing,slugpirecing);
    }
    isShooting=true;
}

//runningman
if keyboard_check_pressed(ord("I"))
{
    instance_create(mouse_x,mouse_y,object13);
}


//restart
if keyboard_check(vk_space)
{
    room_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
