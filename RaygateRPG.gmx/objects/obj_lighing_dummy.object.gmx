<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soldier_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selecting

coalition='army';

spd=1.5;
diagonal_modifier=0.77;
dm=diagonal_modifier;

hasPoint=false;
pointer_x=0;
pointer_y=0;

//rotation
image_single=irandom(image_number-1);
direction=image_index*45;

//change rotation
alarm[0]=3*room_speed;

isMoving=false;
alarm[1]=irandom_range(5,8)*room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving shortcuts

moving0=spr_soldier_move0;
moving1=spr_soldier_move1;
moving2=spr_soldier_move2;
moving3=spr_soldier_move3;
moving4=spr_soldier_move4;
moving5=spr_soldier_move5;
moving6=spr_soldier_move6;
moving7=spr_soldier_move7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Triggers moving

isMoving=!isMoving;
alarm[1]=irandom_range(3,8)*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotating

alarm[0]=3*room_speed;
    
if isMoving=false
{
    image_single=irandom(image_number-1);
    direction=image_index*45;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving behavior

if isMoving
{
    switch (direction/45)
    {
        case 0: sprite_index=moving0 speed=spd; break;
        case 1: sprite_index=moving1 speed=spd*dm; break;
        case 2: sprite_index=moving2 speed=spd; break;
        case 3: sprite_index=moving3 speed=spd*dm; break;
        case 4: sprite_index=moving4 speed=spd; break;
        case 5: sprite_index=moving5 speed=spd*dm; break;
        case 6: sprite_index=moving6 speed=spd; break;
        case 7: sprite_index=moving7 speed=spd*dm; break;
    }
    image_speed=0.25;
    
    if hasPoint
    {
        if point_distance(x,y,pointer_x,pointer_y)&gt;24
        {
            direction=point_direction(x,y,pointer_x,pointer_y);
            //mp_potential_step(pointer_x,pointer_y,speed,0);
        }
        else
        {
            hasPoint=false;
            pointer_x=0;
            pointer_y=0;
            alarm[1]=3*room_speed;
            isMoving=false;
        }
    }
    else
    {
        //mp_potential_step(x+lengthdir_x(64,direction),y+lengthdir_y(64,direction),speed,0);
    }    
}
else
{
    sprite_index=spr_soldier_idle;
    speed=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_outside_solid(point_direction(other.x,other.y,x,y),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointer_x=mouse_x;
pointer_y=mouse_y;
hasPoint=true;
isMoving=true;
alarm[1]=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
